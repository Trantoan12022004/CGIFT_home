// M·∫£ng ch·ª©a th√¥ng tin gi·ªè h√†ng
let cart = [];
let currentFilter = "all";

// Global variables for new features
let shippingFee = 0;
let discountAmount = 0;
let appliedDiscountCode = "";

// Discount codes database
const discountCodes = {
    SUMMER2025: {
        type: "percentage",
        value: 10,
        maxDiscount: 50000,
        minOrder: 200000,
        description: "Gi·∫£m 10% t·ªëi ƒëa 50k cho ƒë∆°n t·ª´ 200k",
    },
    NEWCUSTOMER: {
        type: "fixed",
        value: 20000,
        maxDiscount: 20000,
        minOrder: 100000,
        description: "Gi·∫£m 20k cho kh√°ch h√†ng m·ªõi",
    },
    FREESHIP: {
        type: "shipping",
        value: 100,
        maxDiscount: 50000,
        minOrder: 150000,
        description: "Mi·ªÖn ph√≠ ship cho ƒë∆°n t·ª´ 150k",
    },
};

// Ph√¢n lo·∫°i s·∫£n ph·∫©m theo filter
function categorizeProducts() {
    return {
        all: products,
        bestsale: products.filter((p) => p.isPopular),
        combo: products.filter((p) => p.category === "combo"),
        drink: products.filter((p) => p.category === "drink" || p.category === "dessert"),
        food: products.filter((p) => p.category === "single" || p.category === "food"),
    };
}

// H√†m hi·ªÉn th·ªã s·∫£n ph·∫©m
function displayProducts(filter = "all") {
    const productContainer = document.querySelector(".products-grid");
    if (!productContainer) {
        console.error("Kh√¥ng t√¨m th·∫•y container s·∫£n ph·∫©m");
        return;
    }

    const categorizedProducts = categorizeProducts();
    const productsToShow = categorizedProducts[filter] || categorizedProducts.all;

    productContainer.innerHTML = "";

    if (productsToShow.length === 0) {
        productContainer.innerHTML = `
            <div class="no-products">
                <h3>üåä Kh√¥ng c√≥ s·∫£n ph·∫©m n√†o trong danh m·ª•c n√†y</h3>
                <p>H√£y th·ª≠ ch·ªçn danh m·ª•c kh√°c!</p>
            </div>
        `;
        return;
    }

    productsToShow.forEach((product) => {
        const productHtml = generateProductHTML(product);
        productContainer.innerHTML += productHtml;
    });
}

// T·∫°o HTML cho t·ª´ng s·∫£n ph·∫©m
function generateProductHTML(product) {
    const isCombo = product.category === "combo";
    const isBestSale = product.isPopular;
    const cardClass = isBestSale ? "bestsale" : isCombo ? "combo" : "";

    const originalPriceHTML = product.originalPrice ? `<span class="original-price">~${product.originalPrice.toLocaleString("vi-VN")}ƒë</span>` : "";

    return `
        <div class="product-card ${cardClass}" id="product${product.id}">
            <div class="product-image">
                <img src="${product.image}" alt="${product.name}" loading="lazy">
            </div>
            <div class="product-info">
                <h3 class="product-name">${product.name}</h3>
                <p class="product-description">${product.description}</p>
                <div class="price-section">
                    ${originalPriceHTML}
                    <span class="current-price">${product.price.toLocaleString("vi-VN")}ƒë/${product.unit}</span>
                </div>
                <div class="order-section">
                    <input type="number" id="${product.quantityInputId}" class="quantity-input" min="1" max="50" value="1" placeholder="SL">
                    <button class="order-btn" onclick="addToCartSimple(${product.id})">
                        üõí Th√™m v√†o gi·ªè
                    </button>
                </div>
            </div>
        </div>
    `;
}

// Filter products
function filterProducts(filter) {
    currentFilter = filter;

    // Update active filter button
    document.querySelectorAll(".filter-btn").forEach((btn) => {
        btn.classList.remove("active");
    });
    document.querySelector(`[onclick="filterProducts('${filter}')"]`).classList.add("active");

    // Show loading animation
    const productContainer = document.querySelector(".products-grid");
    productContainer.innerHTML = '<div class="loading-spinner">üåä ƒêang t·∫£i s·∫£n ph·∫©m...</div>';

    // Simulate loading time for better UX
    setTimeout(() => {
        displayProducts(filter);
    }, 300);
}

// Th√™m s·∫£n ph·∫©m v√†o gi·ªè h√†ng
function addToCartSimple(productId) {
    const product = products.find((p) => p.id === productId);
    const quantityInput = document.getElementById(product.quantityInputId);
    const quantity = parseInt(quantityInput.value) || 1;

    if (quantity < 1 || quantity > 50) {
        showNotification("‚ö†Ô∏è S·ªë l∆∞·ª£ng ph·∫£i t·ª´ 1 ƒë·∫øn 50!", "error");
        return;
    }

    // Ki·ªÉm tra xem s·∫£n ph·∫©m ƒë√£ c√≥ trong gi·ªè h√†ng ch∆∞a
    const existingItem = cart.find((item) => item.productId === productId);

    if (existingItem) {
        existingItem.quantity += quantity;
        existingItem.totalPrice = existingItem.price * existingItem.quantity;
        showNotification(`üîÑ ƒê√£ c·∫≠p nh·∫≠t ${product.name} trong gi·ªè h√†ng!`, "success");
    } else {
        cart.push({
            productId: productId,
            productName: product.name,
            price: product.price,
            quantity: quantity,
            totalPrice: product.price * quantity,
        });
        showNotification(`‚úÖ ƒê√£ th√™m ${product.name} v√†o gi·ªè h√†ng!`, "success");
    }

    // Hi·ªáu ·ª©ng th√™m v√†o gi·ªè h√†ng
    showAddToCartAnimation(productId);

    // Reset input
    quantityInput.value = "1";

    updatePaymentForm();
    updateCartBadge();

    // Cu·ªôn ƒë·∫øn ph·∫ßn thanh to√°n
    setTimeout(() => {
        document.getElementById("thanhtoan").scrollIntoView({
            behavior: "smooth",
            block: "start",
        });
    }, 800);
}

// Hi·ªáu ·ª©ng th√™m v√†o gi·ªè h√†ng
function showAddToCartAnimation(productId) {
    const productCard = document.getElementById(`product${productId}`);
    if (productCard) {
        productCard.style.transform = "scale(1.05)";
        productCard.style.boxShadow = "0 20px 40px rgba(6, 105, 148, 0.4)";

        setTimeout(() => {
            productCard.style.transform = "";
            productCard.style.boxShadow = "";
        }, 500);
    }
}

// Hi·ªÉn th·ªã th√¥ng b√°o
function showNotification(message, type = "success") {
    let notification = document.getElementById("notification");
    if (!notification) {
        notification = document.createElement("div");
        notification.id = "notification";
        notification.className = "notification";
        document.body.appendChild(notification);
    }

    notification.className = `notification ${type}`;
    notification.innerHTML = message;
    notification.classList.add("show");

    setTimeout(() => {
        notification.classList.remove("show");
    }, 4000);
}

// Google Maps API key - thay th·∫ø b·∫±ng API key th·ª±c t·∫ø c·ªßa b·∫°n
const GOOGLE_MAPS_API_KEY = "YOUR_GOOGLE_MAPS_API_KEY";

// T√≠nh kho·∫£ng c√°ch t·ª´ HUST (ƒê·∫°i h·ªçc B√°ch khoa H√† N·ªôi) b·∫±ng Google Maps
async function calculateDistance(address) {
    try {
        // T·ªça ƒë·ªô ch√≠nh x√°c c·ªßa HUST (ƒê·∫°i h·ªçc B√°ch khoa H√† N·ªôi)
        const hustLat = 21.0070;
        const hustLng = 105.8430;
        const hustAddress = "ƒê·∫°i h·ªçc B√°ch khoa H√† N·ªôi, Hai B√† Tr∆∞ng, H√† N·ªôi, Vi·ªát Nam";

        console.log("T√≠nh kho·∫£ng c√°ch t·ª´ HUST ƒë·∫øn:", address);

        // Chu·∫©n h√≥a ƒë·ªãa ch·ªâ
        const normalizedAddress = normalizeAddress(address);

        // S·ª≠ d·ª•ng Google Geocoding API ƒë·ªÉ l·∫•y t·ªça ƒë·ªô ch√≠nh x√°c
        const geocodeResult = await geocodeAddress(normalizedAddress);

        if (!geocodeResult) {
            throw new Error("Kh√¥ng th·ªÉ t√¨m th·∫•y ƒë·ªãa ch·ªâ");
        }

        const { lat, lng, formattedAddress } = geocodeResult;

        // S·ª≠ d·ª•ng Google Distance Matrix API ƒë·ªÉ t√≠nh kho·∫£ng c√°ch th·ª±c t·∫ø
        const distanceResult = await calculateDistanceMatrix(hustAddress, formattedAddress);

        if (distanceResult) {
            return {
                distance: distanceResult.distance,
                duration: distanceResult.duration,
                foundAddress: formattedAddress,
                coordinates: { lat, lng },
                method: "google_distance_matrix",
            };
        } else {
            // Fallback: t√≠nh kho·∫£ng c√°ch tr·ª±c ti·∫øp b·∫±ng Haversine
            const distance = calculateHaversineDistance(hustLat, hustLng, lat, lng);
            return {
                distance: distance,
                foundAddress: formattedAddress,
                coordinates: { lat, lng },
                method: "haversine_fallback",
            };
        }
    } catch (error) {
        console.error("L·ªói khi t√≠nh kho·∫£ng c√°ch:", error);

        // Fallback cu·ªëi c√πng: s·ª≠ d·ª•ng OpenStreetMap
        return await calculateDistanceFallback(address);
    }
}

// Chu·∫©n h√≥a ƒë·ªãa ch·ªâ ƒë·ªÉ tƒÉng kh·∫£ nƒÉng t√¨m ki·∫øm
function normalizeAddress(address) {
    // ƒê·∫£m b·∫£o ƒë·ªãa ch·ªâ c√≥ "H√† N·ªôi"
    if (!address.toLowerCase().includes("h√† n·ªôi") && !address.toLowerCase().includes("hanoi")) {
        address = address + ", H√† N·ªôi";
    }
    
    // Th√™m "Vi·ªát Nam" n·∫øu ch∆∞a c√≥
    if (!address.toLowerCase().includes("vi·ªát nam") && !address.toLowerCase().includes("vietnam")) {
        address = address + ", Vi·ªát Nam";
    }
    
    return address;
}

// Geocoding s·ª≠ d·ª•ng Google Maps API
async function geocodeAddress(address) {
    try {
        const response = await fetch(
            `https://maps.googleapis.com/maps/api/geocode/json?` +
                `address=${encodeURIComponent(address)}&` +
                `region=vn&` +
                `language=vi&` +
                `key=${GOOGLE_MAPS_API_KEY}`
        );

        const data = await response.json();

        if (data.status === "OK" && data.results.length > 0) {
            const result = data.results[0];
            const location = result.geometry.location;

            return {
                lat: location.lat,
                lng: location.lng,
                formattedAddress: result.formatted_address,
            };
        } else {
            console.error("Geocoding th·∫•t b·∫°i:", data.status);
            return null;
        }
    } catch (error) {
        console.error("L·ªói geocoding:", error);
        return null;
    }
}

// T√≠nh kho·∫£ng c√°ch s·ª≠ d·ª•ng Google Distance Matrix API
async function calculateDistanceMatrix(origin, destination) {
    try {
        const response = await fetch(
            `https://maps.googleapis.com/maps/api/distancematrix/json?` +
                `origins=${encodeURIComponent(origin)}&` +
                `destinations=${encodeURIComponent(destination)}&` +
                `mode=driving&` +
                `language=vi&` +
                `region=vn&` +
                `key=${GOOGLE_MAPS_API_KEY}`
        );

        const data = await response.json();

        if (data.status === "OK" && data.rows.length > 0 && data.rows[0].elements.length > 0 && data.rows[0].elements[0].status === "OK") {
            const element = data.rows[0].elements[0];

            return {
                distance: element.distance.value / 1000, // Convert t·ª´ meters sang km
                duration: element.duration.value / 60, // Convert t·ª´ seconds sang minutes
                distanceText: element.distance.text,
                durationText: element.duration.text,
            };
        } else {
            console.error("Distance Matrix th·∫•t b·∫°i:", data.status);
            return null;
        }
    } catch (error) {
        console.error("L·ªói Distance Matrix:", error);
        return null;
    }
}

// Fallback function s·ª≠ d·ª•ng OpenStreetMap
async function calculateDistanceFallback(address) {
    try {
        const hustLat = 21.0070;
        const hustLng = 105.8430;

        console.log("S·ª≠ d·ª•ng OpenStreetMap fallback...");
        
        // Chu·∫©n h√≥a ƒë·ªãa ch·ªâ ƒë·ªÉ tƒÉng kh·∫£ nƒÉng t√¨m th·∫•y
        const normalizedAddress = normalizeAddress(address);

        const response = await fetch(
            `https://nominatim.openstreetmap.org/search?` +
                `format=json&` +
                `q=${encodeURIComponent(normalizedAddress)}&` +
                `limit=5&` +
                `addressdetails=1&` +
                `countrycodes=vn&` +
                `accept-language=vi`,
            {
                headers: {
                    "User-Agent": "CTES-SIE-SHOP-Website",
                },
            }
        );

        const data = await response.json();

        if (data && data.length > 0) {
            // T√¨m k·∫øt qu·∫£ t·ªët nh·∫•t d·ª±a tr√™n ƒë·ªô ch√≠nh x√°c
            let bestResult = data[0];
            let bestScore = 0;
            
            for (let result of data) {
                let score = 0;
                // ∆Øu ti√™n k·∫øt qu·∫£ c√≥ "H√† N·ªôi"
                if (result.display_name.toLowerCase().includes("h√† n·ªôi") || result.display_name.toLowerCase().includes("hanoi")) {
                    score += 5;
                }
                
                // Ki·ªÉm tra xem t·∫•t c·∫£ c√°c t·ª´ quan tr·ªçng c√≥ trong k·∫øt qu·∫£ kh√¥ng
                const importantWords = address.toLowerCase().split(/\s+/).filter(w => w.length > 2);
                for (let word of importantWords) {
                    if (result.display_name.toLowerCase().includes(word)) {
                        score += 1;
                    }
                }
                
                if (score > bestScore) {
                    bestScore = score;
                    bestResult = result;
                }
            }

            const lat = parseFloat(bestResult.lat);
            const lng = parseFloat(bestResult.lon);
            const distance = calculateHaversineDistance(hustLat, hustLng, lat, lng);

            return {
                distance: distance,
                foundAddress: bestResult.display_name,
                coordinates: { lat, lng },
                method: "openstreetmap_fallback",
                isApproximate: true,
            };
        }

        return null;
    } catch (error) {
        console.error("T√≠nh kho·∫£ng c√°ch fallback th·∫•t b·∫°i:", error);
        return null;
    }
}

// C·∫£i ti·∫øn h√†m Haversine cho t√≠nh to√°n ch√≠nh x√°c h∆°n
function calculateHaversineDistance(lat1, lon1, lat2, lon2) {
    if (isNaN(lat1) || isNaN(lon1) || isNaN(lat2) || isNaN(lon2)) {
        console.error("T·ªça ƒë·ªô kh√¥ng h·ª£p l·ªá cho t√≠nh to√°n kho·∫£ng c√°ch");
        return null;
    }

    const R = 6371; // B√°n k√≠nh tr√°i ƒë·∫•t t√≠nh b·∫±ng km

    const lat1Rad = (lat1 * Math.PI) / 180;
    const lat2Rad = (lat2 * Math.PI) / 180;
    const deltaLatRad = ((lat2 - lat1) * Math.PI) / 180;
    const deltaLonRad = ((lon2 - lon1) * Math.PI) / 180;

    const a = Math.sin(deltaLatRad / 2) * Math.sin(deltaLatRad / 2) + 
              Math.cos(lat1Rad) * Math.cos(lat2Rad) * 
              Math.sin(deltaLonRad / 2) * Math.sin(deltaLonRad / 2);

    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
    const distance = R * c;

    // Th√™m h·ªá s·ªë ƒëi·ªÅu ch·ªânh ƒë∆∞·ªùng ƒëi th·ª±c t·∫ø (ƒë∆∞·ªùng kh√¥ng ƒëi th·∫≥ng)
    const roadFactor = 1.3;
    return Math.round((distance * roadFactor) * 10) / 10; // L√†m tr√≤n 1 ch·ªØ s·ªë th·∫≠p ph√¢n
}

// C·∫≠p nh·∫≠t ph√≠ giao h√†ng v·ªõi Google Maps
async function updateShippingFee() {
    const addressInput = document.getElementById("address");
    const distanceInfo = document.getElementById("distanceInfo");
    const distanceText = document.getElementById("distanceText");
    const shippingFeeSpan = document.getElementById("shippingFee");

    if (!addressInput || !distanceInfo || !distanceText || !shippingFeeSpan) {
        console.error("Thi·∫øu c√°c ph·∫ßn t·ª≠ c·∫ßn thi·∫øt ƒë·ªÉ t√≠nh ph√≠ ship");
        return;
    }

    const address = addressInput.value.trim();

    if (!address) {
        distanceInfo.style.display = "none";
        shippingFee = 0;
        updatePaymentSummary();
        return;
    }

    // Validation ƒë·ªãa ch·ªâ c∆° b·∫£n
    if (address.length < 10) {
        distanceInfo.style.display = "block";
        distanceText.innerHTML = '<span style="color: #f59e0b;">‚ö†Ô∏è Vui l√≤ng nh·∫≠p ƒë·ªãa ch·ªâ chi ti·∫øt h∆°n (t·ªëi thi·ªÉu 10 k√Ω t·ª±)</span>';
        shippingFeeSpan.textContent = "";
        return;
    }

    // Hi·ªÉn th·ªã loading v·ªõi animation
    distanceInfo.style.display = "block";
    distanceText.innerHTML = `
        <span class="loading-text">üìç ƒêang t√≠nh kho·∫£ng c√°ch v√† ph√≠ giao h√†ng...</span>
        <div class="loading-spinner-small"></div>
    `;
    shippingFeeSpan.textContent = "";

    try {
        const result = await calculateDistance(address);

        if (result && result.distance !== null) {
            const { distance, duration, foundAddress, method, isApproximate } = result;

            let methodText = "";
            let methodClass = "";
            
            if (method === "google_distance_matrix") {
                methodText = "üó∫Ô∏è Google Maps";
                methodClass = "method-google";
            } else if (method === "haversine_fallback") {
                methodText = "üìè Kho·∫£ng c√°ch th·∫≥ng";
                methodClass = "method-haversine";
            } else if (method === "openstreetmap_fallback") {
                methodText = "üåç B·∫£n ƒë·ªì m·ªü (∆∞·ªõc t√≠nh)";
                methodClass = "method-osm";
            }

            // T√≠nh ph√≠ ship
            if (distance <= 5) {
                shippingFee = 0;
                distanceText.innerHTML = `
                    <div class="distance-result success">
                        <strong>üìç Kho·∫£ng c√°ch: ${distance.toFixed(1)}km</strong>
                        ${duration ? `<br><small>‚è±Ô∏è Th·ªùi gian: ~${Math.round(duration)} ph√∫t</small>` : ""}
                        <br><small class="method-info ${methodClass}">${methodText}</small>
                        ${isApproximate ? '<br><small class="approximate-info">‚ö†Ô∏è Kho·∫£ng c√°ch ∆∞·ªõc t√≠nh</small>' : ''}
                    </div>
                `;
                shippingFeeSpan.innerHTML = '<span style="color: #10b981; font-weight: bold;">üéâ Mi·ªÖn ph√≠ giao h√†ng!</span>';
            } else {
                shippingFee = Math.ceil(distance - 5) * 5000;
                distanceText.innerHTML = `
                    <div class="distance-result">
                        <strong>üìç Kho·∫£ng c√°ch: ${distance.toFixed(1)}km</strong>
                        ${duration ? `<br><small>‚è±Ô∏è Th·ªùi gian: ~${Math.round(duration)} ph√∫t</small>` : ""}
                        <br><small class="method-info ${methodClass}">${methodText}</small>
                        ${isApproximate ? '<br><small class="approximate-info">‚ö†Ô∏è Kho·∫£ng c√°ch ∆∞·ªõc t√≠nh</small>' : ''}
                    </div>
                `;
                shippingFeeSpan.innerHTML = `<span style="color: #f59e0b; font-weight: bold;">üöö Ph√≠ ship: ${shippingFee.toLocaleString("vi-VN")}ƒë</span>`;
            }

            // Hi·ªÉn th·ªã ƒë·ªãa ch·ªâ ƒë∆∞·ª£c t√¨m th·∫•y n·∫øu kh√°c nhi·ªÅu v·ªõi input
            if (foundAddress && foundAddress.toLowerCase() !== address.toLowerCase()) {
                distanceText.innerHTML += `
                    <div class="found-address">
                        <small style="color: #666; font-style: italic;">
                            üìç ƒê·ªãa ch·ªâ t√¨m th·∫•y: ${foundAddress}
                        </small>
                    </div>
                `;
            }
        } else {
            throw new Error("Kh√¥ng th·ªÉ t√≠nh kho·∫£ng c√°ch");
        }
    } catch (error) {
        console.error("T√≠nh kho·∫£ng c√°ch th·∫•t b·∫°i:", error);

        distanceText.innerHTML = `
            <div class="distance-error">
                <span style="color: #ef4444;">‚ùå Kh√¥ng th·ªÉ t√¨m th·∫•y ƒë·ªãa ch·ªâ ch√≠nh x√°c</span>
                <br><small style="color: #666;">
                    Vui l√≤ng ki·ªÉm tra l·∫°i ho·∫∑c li√™n h·ªá v·ªõi ch√∫ng t√¥i ƒë·ªÉ ƒë∆∞·ª£c h·ªó tr·ª£
                </small>
                <br><small style="color: #888;">
                    üí° G·ª£i √Ω: Nh·∫≠p ƒë·∫ßy ƒë·ªß s·ªë nh√†, t√™n ƒë∆∞·ªùng, ph∆∞·ªùng/x√£, qu·∫≠n/huy·ªán, H√† N·ªôi
                </small>
            </div>
        `;
        shippingFeeSpan.innerHTML = '<span style="color: #666;">Ph√≠ ship s·∫Ω ƒë∆∞·ª£c x√°c nh·∫≠n khi li√™n h·ªá</span>';
        shippingFee = 0;
    }

    updatePaymentSummary();
}

// Load Google Maps API dynamically
function loadGoogleMapsAPI() {
    return new Promise((resolve, reject) => {
        // Ki·ªÉm tra xem ƒë√£ load ch∆∞a
        if (window.google && window.google.maps) {
            resolve();
            return;
        }

        const script = document.createElement("script");
        script.src = `https://maps.googleapis.com/maps/api/js?key=${GOOGLE_MAPS_API_KEY}&libraries=geometry`;
        script.async = true;
        script.defer = true;

        script.onload = () => resolve();
        script.onerror = () => reject(new Error("Google Maps API failed to load"));

        document.head.appendChild(script);
    });
}

// Alternative: S·ª≠ d·ª•ng Google Maps JavaScript API tr·ª±c ti·∫øp (n·∫øu c√≥)
async function calculateDistanceWithMapsAPI(origin, destination) {
    try {
        await loadGoogleMapsAPI();

        const service = new google.maps.DistanceMatrixService();

        return new Promise((resolve, reject) => {
            service.getDistanceMatrix(
                {
                    origins: [origin],
                    destinations: [destination],
                    travelMode: google.maps.TravelMode.DRIVING,
                    unitSystem: google.maps.UnitSystem.METRIC,
                    avoidHighways: false,
                    avoidTolls: false,
                },
                (response, status) => {
                    if (status === google.maps.DistanceMatrixStatus.OK) {
                        const element = response.rows[0].elements[0];
                        if (element.status === "OK") {
                            resolve({
                                distance: element.distance.value / 1000,
                                duration: element.duration.value / 60,
                                distanceText: element.distance.text,
                                durationText: element.duration.text,
                            });
                        } else {
                            reject(new Error(`Distance calculation failed: ${element.status}`));
                        }
                    } else {
                        reject(new Error(`Distance Matrix API failed: ${status}`));
                    }
                }
            );
        });
    } catch (error) {
        console.error("Google Maps API error:", error);
        throw error;
    }
}

// Th√™m CSS cho loading v√† styling m·ªõi
const enhancedDistanceCSS = `
    <style>
        .loading-text {
            color: #0ea5e9;
            font-weight: 500;
        }
        
        .loading-spinner-small {
            display: inline-block;
            width: 16px;
            height: 16px;
            border: 2px solid #e0f7fa;
            border-top: 2px solid #0ea5e9;
            border-radius: 50%;
            animation: spin 1s linear infinite;
            margin-left: 8px;
        }
        
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
        
        .distance-result {
            background: linear-gradient(145deg, #f0f9ff, #e0f7fa);
            padding: 12px 15px;
            border-radius: 10px;
            border-left: 4px solid #0ea5e9;
            margin-top: 5px;
        }
        
        .distance-result.success {
            background: linear-gradient(145deg, #f0fdf4, #dcfce7);
            border-left-color: #10b981;
        }
        
        .distance-error {
            background: linear-gradient(145deg, #fef2f2, #fee2e2);
            padding: 12px 15px;
            border-radius: 10px;
            border-left: 4px solid #ef4444;
            margin-top: 5px;
        }
        
        .method-info {
            color: #6b7280;
            font-size: 0.8rem;
            background: rgba(255, 255, 255, 0.7);
            padding: 2px 6px;
            border-radius: 4px;
            display: inline-block;
            margin-top: 4px;
        }
        
        .found-address {
            margin-top: 8px;
            padding: 8px 10px;
            background: rgba(255, 255, 255, 0.8);
            border-radius: 6px;
            border: 1px dashed #d1d5db;
        }
    </style>
`;

// Th√™m CSS khi trang load
document.addEventListener("DOMContentLoaded", function () {
    if (!document.querySelector("#enhanced-distance-styles")) {
        const styleElement = document.createElement("div");
        styleElement.id = "enhanced-distance-styles";
        styleElement.innerHTML = enhancedDistanceCSS;
        document.head.appendChild(styleElement);
    }
});

// T√≠nh kho·∫£ng c√°ch t·ª´ HUST (ƒê·∫°i h·ªçc B√°ch khoa H√† N·ªôi)
async function calculateDistance(address) {
    try {
        // T·ªça ƒë·ªô ch√≠nh x√°c c·ªßa HUST (ƒê·∫°i h·ªçc B√°ch khoa H√† N·ªôi)
        const hustLat = 21.0070;
        const hustLng = 105.8430;
        const hustAddress = "ƒê·∫°i h·ªçc B√°ch khoa H√† N·ªôi, Hai B√† Tr∆∞ng, H√† N·ªôi, Vi·ªát Nam";

        console.log("T√≠nh kho·∫£ng c√°ch t·ª´ HUST ƒë·∫øn:", address);

        // Chu·∫©n h√≥a ƒë·ªãa ch·ªâ
        const normalizedAddress = normalizeAddress(address);

        // S·ª≠ d·ª•ng Google Geocoding API ƒë·ªÉ l·∫•y t·ªça ƒë·ªô ch√≠nh x√°c
        const geocodeResult = await geocodeAddress(normalizedAddress);

        if (!geocodeResult) {
            throw new Error("Kh√¥ng th·ªÉ t√¨m th·∫•y ƒë·ªãa ch·ªâ");
        }

        const { lat, lng, formattedAddress } = geocodeResult;

        // S·ª≠ d·ª•ng Google Distance Matrix API ƒë·ªÉ t√≠nh kho·∫£ng c√°ch th·ª±c t·∫ø
        const distanceResult = await calculateDistanceMatrix(hustAddress, formattedAddress);

        if (distanceResult) {
            return {
                distance: distanceResult.distance,
                duration: distanceResult.duration,
                foundAddress: formattedAddress,
                coordinates: { lat, lng },
                method: "google_distance_matrix",
            };
        } else {
            // Fallback: t√≠nh kho·∫£ng c√°ch tr·ª±c ti·∫øp b·∫±ng Haversine
            const distance = calculateHaversineDistance(hustLat, hustLng, lat, lng);
            return {
                distance: distance,
                foundAddress: formattedAddress,
                coordinates: { lat, lng },
                method: "haversine_fallback",
            };
        }
    } catch (error) {
        console.error("L·ªói khi t√≠nh kho·∫£ng c√°ch:", error);

        // Fallback cu·ªëi c√πng: s·ª≠ d·ª•ng OpenStreetMap
        return await calculateDistanceFallback(address);
    }
}

// Chu·∫©n h√≥a ƒë·ªãa ch·ªâ ƒë·ªÉ tƒÉng kh·∫£ nƒÉng t√¨m ki·∫øm
function normalizeAddress(address) {
    // ƒê·∫£m b·∫£o ƒë·ªãa ch·ªâ c√≥ "H√† N·ªôi"
    if (!address.toLowerCase().includes("h√† n·ªôi") && !address.toLowerCase().includes("hanoi")) {
        address = address + ", H√† N·ªôi";
    }
    
    // Th√™m "Vi·ªát Nam" n·∫øu ch∆∞a c√≥
    if (!address.toLowerCase().includes("vi·ªát nam") && !address.toLowerCase().includes("vietnam")) {
        address = address + ", Vi·ªát Nam";
    }
    
    return address;
}

// Geocoding s·ª≠ d·ª•ng Google Maps API
async function geocodeAddress(address) {
    try {
        const response = await fetch(
            `https://maps.googleapis.com/maps/api/geocode/json?` +
                `address=${encodeURIComponent(address)}&` +
                `region=vn&` +
                `language=vi&` +
                `key=${GOOGLE_MAPS_API_KEY}`
        );

        const data = await response.json();

        if (data.status === "OK" && data.results.length > 0) {
            const result = data.results[0];
            const location = result.geometry.location;

            return {
                lat: location.lat,
                lng: location.lng,
                formattedAddress: result.formatted_address,
            };
        } else {
            console.error("Geocoding th·∫•t b·∫°i:", data.status);
            return null;
        }
    } catch (error) {
        console.error("L·ªói geocoding:", error);
        return null;
    }
}

// T√≠nh kho·∫£ng c√°ch s·ª≠ d·ª•ng Google Distance Matrix API
async function calculateDistanceMatrix(origin, destination) {
    try {
        const response = await fetch(
            `https://maps.googleapis.com/maps/api/distancematrix/json?` +
                `origins=${encodeURIComponent(origin)}&` +
                `destinations=${encodeURIComponent(destination)}&` +
                `mode=driving&` +
                `language=vi&` +
                `region=vn&` +
                `key=${GOOGLE_MAPS_API_KEY}`
        );

        const data = await response.json();

        if (data.status === "OK" && data.rows.length > 0 && data.rows[0].elements.length > 0 && data.rows[0].elements[0].status === "OK") {
            const element = data.rows[0].elements[0];

            return {
                distance: element.distance.value / 1000, // Convert t·ª´ meters sang km
                duration: element.duration.value / 60, // Convert t·ª´ seconds sang minutes
                distanceText: element.distance.text,
                durationText: element.duration.text,
            };
        } else {
            console.error("Distance Matrix th·∫•t b·∫°i:", data.status);
            return null;
        }
    } catch (error) {
        console.error("L·ªói Distance Matrix:", error);
        return null;
    }
}

// Fallback function s·ª≠ d·ª•ng OpenStreetMap
async function calculateDistanceFallback(address) {
    try {
        const hustLat = 21.0070;
        const hustLng = 105.8430;

        console.log("S·ª≠ d·ª•ng OpenStreetMap fallback...");
        
        // Chu·∫©n h√≥a ƒë·ªãa ch·ªâ ƒë·ªÉ tƒÉng kh·∫£ nƒÉng t√¨m th·∫•y
        const normalizedAddress = normalizeAddress(address);

        const response = await fetch(
            `https://nominatim.openstreetmap.org/search?` +
                `format=json&` +
                `q=${encodeURIComponent(normalizedAddress)}&` +
                `limit=5&` +
                `addressdetails=1&` +
                `countrycodes=vn&` +
                `accept-language=vi`,
            {
                headers: {
                    "User-Agent": "CTES-SIE-SHOP-Website",
                },
            }
        );

        const data = await response.json();

        if (data && data.length > 0) {
            // T√¨m k·∫øt qu·∫£ t·ªët nh·∫•t d·ª±a tr√™n ƒë·ªô ch√≠nh x√°c
            let bestResult = data[0];
            let bestScore = 0;
            
            for (let result of data) {
                let score = 0;
                // ∆Øu ti√™n k·∫øt qu·∫£ c√≥ "H√† N·ªôi"
                if (result.display_name.toLowerCase().includes("h√† n·ªôi") || result.display_name.toLowerCase().includes("hanoi")) {
                    score += 5;
                }
                
                // Ki·ªÉm tra xem t·∫•t c·∫£ c√°c t·ª´ quan tr·ªçng c√≥ trong k·∫øt qu·∫£ kh√¥ng
                const importantWords = address.toLowerCase().split(/\s+/).filter(w => w.length > 2);
                for (let word of importantWords) {
                    if (result.display_name.toLowerCase().includes(word)) {
                        score += 1;
                    }
                }
                
                if (score > bestScore) {
                    bestScore = score;
                    bestResult = result;
                }
            }

            const lat = parseFloat(bestResult.lat);
            const lng = parseFloat(bestResult.lon);
            const distance = calculateHaversineDistance(hustLat, hustLng, lat, lng);

            return {
                distance: distance,
                foundAddress: bestResult.display_name,
                coordinates: { lat, lng },
                method: "openstreetmap_fallback",
                isApproximate: true,
            };
        }

        return null;
    } catch (error) {
        console.error("T√≠nh kho·∫£ng c√°ch fallback th·∫•t b·∫°i:", error);
        return null;
    }
}

// C·∫£i ti·∫øn h√†m Haversine cho t√≠nh to√°n ch√≠nh x√°c h∆°n
function calculateHaversineDistance(lat1, lon1, lat2, lon2) {
    if (isNaN(lat1) || isNaN(lon1) || isNaN(lat2) || isNaN(lon2)) {
        console.error("T·ªça ƒë·ªô kh√¥ng h·ª£p l·ªá cho t√≠nh to√°n kho·∫£ng c√°ch");
        return null;
    }

    const R = 6371; // B√°n k√≠nh tr√°i ƒë·∫•t t√≠nh b·∫±ng km

    const lat1Rad = (lat1 * Math.PI) / 180;
    const lat2Rad = (lat2 * Math.PI) / 180;
    const deltaLatRad = ((lat2 - lat1) * Math.PI) / 180;
    const deltaLonRad = ((lon2 - lon1) * Math.PI) / 180;

    const a = Math.sin(deltaLatRad / 2) * Math.sin(deltaLatRad / 2) + 
              Math.cos(lat1Rad) * Math.cos(lat2Rad) * 
              Math.sin(deltaLonRad / 2) * Math.sin(deltaLonRad / 2);

    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
    const distance = R * c;

    // Th√™m h·ªá s·ªë ƒëi·ªÅu ch·ªânh ƒë∆∞·ªùng ƒëi th·ª±c t·∫ø (ƒë∆∞·ªùng kh√¥ng ƒëi th·∫≥ng)
    const roadFactor = 1.3;
    return Math.round((distance * roadFactor) * 10) / 10; // L√†m tr√≤n 1 ch·ªØ s·ªë th·∫≠p ph√¢n
}

// C·∫≠p nh·∫≠t ph√≠ giao h√†ng v·ªõi Google Maps
async function updateShippingFee() {
    const addressInput = document.getElementById("address");
    const distanceInfo = document.getElementById("distanceInfo");
    const distanceText = document.getElementById("distanceText");
    const shippingFeeSpan = document.getElementById("shippingFee");

    if (!addressInput || !distanceInfo || !distanceText || !shippingFeeSpan) {
        console.error("Thi·∫øu c√°c ph·∫ßn t·ª≠ c·∫ßn thi·∫øt ƒë·ªÉ t√≠nh ph√≠ ship");
        return;
    }

    const address = addressInput.value.trim();

    if (!address) {
        distanceInfo.style.display = "none";
        shippingFee = 0;
        updatePaymentSummary();
        return;
    }

    // Validation ƒë·ªãa ch·ªâ c∆° b·∫£n
    if (address.length < 10) {
        distanceInfo.style.display = "block";
        distanceText.innerHTML = '<span style="color: #f59e0b;">‚ö†Ô∏è Vui l√≤ng nh·∫≠p ƒë·ªãa ch·ªâ chi ti·∫øt h∆°n (t·ªëi thi·ªÉu 10 k√Ω t·ª±)</span>';
        shippingFeeSpan.textContent = "";
        return;
    }

    // Hi·ªÉn th·ªã loading v·ªõi animation
    distanceInfo.style.display = "block";
    distanceText.innerHTML = `
        <span class="loading-text">üìç ƒêang t√≠nh kho·∫£ng c√°ch v√† ph√≠ giao h√†ng...</span>
        <div class="loading-spinner-small"></div>
    `;
    shippingFeeSpan.textContent = "";

    try {
        const result = await calculateDistance(address);

        if (result && result.distance !== null) {
            const { distance, duration, foundAddress, method, isApproximate } = result;

            let methodText = "";
            let methodClass = "";
            
            if (method === "google_distance_matrix") {
                methodText = "üó∫Ô∏è Google Maps";
                methodClass = "method-google";
            } else if (method === "haversine_fallback") {
                methodText = "üìè Kho·∫£ng c√°ch th·∫≥ng";
                methodClass = "method-haversine";
            } else if (method === "openstreetmap_fallback") {
                methodText = "üåç B·∫£n ƒë·ªì m·ªü (∆∞·ªõc t√≠nh)";
                methodClass = "method-osm";
            }

            // T√≠nh ph√≠ ship
            if (distance <= 5) {
                shippingFee = 0;
                distanceText.innerHTML = `
                    <div class="distance-result success">
                        <strong>üìç Kho·∫£ng c√°ch: ${distance.toFixed(1)}km</strong>
                        ${duration ? `<br><small>‚è±Ô∏è Th·ªùi gian: ~${Math.round(duration)} ph√∫t</small>` : ""}
                        <br><small class="method-info ${methodClass}">${methodText}</small>
                        ${isApproximate ? '<br><small class="approximate-info">‚ö†Ô∏è Kho·∫£ng c√°ch ∆∞·ªõc t√≠nh</small>' : ''}
                    </div>
                `;
                shippingFeeSpan.innerHTML = '<span style="color: #10b981; font-weight: bold;">üéâ Mi·ªÖn ph√≠ giao h√†ng!</span>';
            } else {
                shippingFee = Math.ceil(distance - 5) * 5000;
                distanceText.innerHTML = `
                    <div class="distance-result">
                        <strong>üìç Kho·∫£ng c√°ch: ${distance.toFixed(1)}km</strong>
                        ${duration ? `<br><small>‚è±Ô∏è Th·ªùi gian: ~${Math.round(duration)} ph√∫t</small>` : ""}
                        <br><small class="method-info ${methodClass}">${methodText}</small>
                        ${isApproximate ? '<br><small class="approximate-info">‚ö†Ô∏è Kho·∫£ng c√°ch ∆∞·ªõc t√≠nh</small>' : ''}
                    </div>
                `;
                shippingFeeSpan.innerHTML = `<span style="color: #f59e0b; font-weight: bold;">üöö Ph√≠ ship: ${shippingFee.toLocaleString("vi-VN")}ƒë</span>`;
            }

            // Hi·ªÉn th·ªã ƒë·ªãa ch·ªâ ƒë∆∞·ª£c t√¨m th·∫•y n·∫øu kh√°c nhi·ªÅu v·ªõi input
            if (foundAddress && foundAddress.toLowerCase() !== address.toLowerCase()) {
                distanceText.innerHTML += `
                    <div class="found-address">
                        <small style="color: #666; font-style: italic;">
                            üìç ƒê·ªãa ch·ªâ t√¨m th·∫•y: ${foundAddress}
                        </small>
                    </div>
                `;
            }
        } else {
            throw new Error("Kh√¥ng th·ªÉ t√≠nh kho·∫£ng c√°ch");
        }
    } catch (error) {
        console.error("T√≠nh kho·∫£ng c√°ch th·∫•t b·∫°i:", error);

        distanceText.innerHTML = `
            <div class="distance-error">
                <span style="color: #ef4444;">‚ùå Kh√¥ng th·ªÉ t√¨m th·∫•y ƒë·ªãa ch·ªâ ch√≠nh x√°c</span>
                <br><small style="color: #666;">
                    Vui l√≤ng ki·ªÉm tra l·∫°i ho·∫∑c li√™n h·ªá v·ªõi ch√∫ng t√¥i ƒë·ªÉ ƒë∆∞·ª£c h·ªó tr·ª£
                </small>
                <br><small style="color: #888;">
                    üí° G·ª£i √Ω: Nh·∫≠p ƒë·∫ßy ƒë·ªß s·ªë nh√†, t√™n ƒë∆∞·ªùng, ph∆∞·ªùng/x√£, qu·∫≠n/huy·ªán, H√† N·ªôi
                </small>
            </div>
        `;
        shippingFeeSpan.innerHTML = '<span style="color: #666;">Ph√≠ ship s·∫Ω ƒë∆∞·ª£c x√°c nh·∫≠n khi li√™n h·ªá</span>';
        shippingFee = 0;
    }

    updatePaymentSummary();
}

// Load Google Maps API dynamically
function loadGoogleMapsAPI() {
    return new Promise((resolve, reject) => {
        // Ki·ªÉm tra xem ƒë√£ load ch∆∞a
        if (window.google && window.google.maps) {
            resolve();
            return;
        }

        const script = document.createElement("script");
        script.src = `https://maps.googleapis.com/maps/api/js?key=${GOOGLE_MAPS_API_KEY}&libraries=geometry`;
        script.async = true;
        script.defer = true;

        script.onload = () => resolve();
        script.onerror = () => reject(new Error("Google Maps API failed to load"));

        document.head.appendChild(script);
    });
}

// Alternative: S·ª≠ d·ª•ng Google Maps JavaScript API tr·ª±c ti·∫øp (n·∫øu c√≥)
async function calculateDistanceWithMapsAPI(origin, destination) {
    try {
        await loadGoogleMapsAPI();

        const service = new google.maps.DistanceMatrixService();

        return new Promise((resolve, reject) => {
            service.getDistanceMatrix(
                {
                    origins: [origin],
                    destinations: [destination],
                    travelMode: google.maps.TravelMode.DRIVING,
                    unitSystem: google.maps.UnitSystem.METRIC,
                    avoidHighways: false,
                    avoidTolls: false,
                },
                (response, status) => {
                    if (status === google.maps.DistanceMatrixStatus.OK) {
                        const element = response.rows[0].elements[0];
                        if (element.status === "OK") {
                            resolve({
                                distance: element.distance.value / 1000,
                                duration: element.duration.value / 60,
                                distanceText: element.distance.text,
                                durationText: element.duration.text,
                            });
                        } else {
                            reject(new Error(`Distance calculation failed: ${element.status}`));
                        }
                    } else {
                        reject(new Error(`Distance Matrix API failed: ${status}`));
                    }
                }
            );
        });
    } catch (error) {
        console.error("Google Maps API error:", error);
        throw error;
    }
}

// Th√™m CSS cho loading v√† styling m·ªõi
const enhancedDistanceCSS = `
    <style>
        .loading-text {
            color: #0ea5e9;
            font-weight: 500;
        }
        
        .loading-spinner-small {
            display: inline-block;
            width: 16px;
            height: 16px;
            border: 2px solid #e0f7fa;
            border-top: 2px solid #0ea5e9;
            border-radius: 50%;
            animation: spin 1s linear infinite;
            margin-left: 8px;
        }
        
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
        
        .distance-result {
            background: linear-gradient(145deg, #f0f9ff, #e0f7fa);
            padding: 12px 15px;
            border-radius: 10px;
            border-left: 4px solid #0ea5e9;
            margin-top: 5px;
        }
        
        .distance-result.success {
            background: linear-gradient(145deg, #f0fdf4, #dcfce7);
            border-left-color: #10b981;
        }
        
        .distance-error {
            background: linear-gradient(145deg, #fef2f2, #fee2e2);
            padding: 12px 15px;
            border-radius: 10px;
            border-left: 4px solid #ef4444;
            margin-top: 5px;
        }
        
        .method-info {
            color: #6b7280;
            font-size: 0.8rem;
            background: rgba(255, 255, 255, 0.7);
            padding: 2px 6px;
            border-radius: 4px;
            display: inline-block;
            margin-top: 4px;
        }
        
        .found-address {
            margin-top: 8px;
            padding: 8px 10px;
            background: rgba(255, 255, 255, 0.8);
            border-radius: 6px;
            border: 1px dashed #d1d5db;
        }
    </style>
`;

// Th√™m CSS khi trang load
document.addEventListener("DOMContentLoaded", function () {
    if (!document.querySelector("#enhanced-distance-styles")) {
        const styleElement = document.createElement("div");
        styleElement.id = "enhanced-distance-styles";
        styleElement.innerHTML = enhancedDistanceCSS;
        document.head.appendChild(styleElement);
    }
});

// T√≠nh kho·∫£ng c√°ch t·ª´ HUST (ƒê·∫°i h·ªçc B√°ch khoa H√† N·ªôi)
async function calculateDistance(address) {
    try {
        // T·ªça ƒë·ªô ch√≠nh x√°c c·ªßa HUST (ƒê·∫°i h·ªçc B√°ch khoa H√† N·ªôi)
        const hustLat = 21.0070;
        const hustLng = 105.8430;
        const hustAddress = "ƒê·∫°i h·ªçc B√°ch khoa H√† N·ªôi, Hai B√† Tr∆∞ng, H√† N·ªôi, Vi·ªát Nam";

        console.log("T√≠nh kho·∫£ng c√°ch t·ª´ HUST ƒë·∫øn:", address);

        // Chu·∫©n h√≥a ƒë·ªãa ch·ªâ
        const normalizedAddress = normalizeAddress(address);

        // S·ª≠ d·ª•ng Google Geocoding API ƒë·ªÉ l·∫•y t·ªça ƒë·ªô ch√≠nh x√°c
        const geocodeResult = await geocodeAddress(normalizedAddress);

        if (!geocodeResult) {
            throw new Error("Kh√¥ng th·ªÉ t√¨m th·∫•y ƒë·ªãa ch·ªâ");
        }

        const { lat, lng, formattedAddress } = geocodeResult;

        // S·ª≠ d·ª•ng Google Distance Matrix API ƒë·ªÉ t√≠nh kho·∫£ng c√°ch th·ª±c t·∫ø
        const distanceResult = await calculateDistanceMatrix(hustAddress, formattedAddress);

        if (distanceResult) {
            return {
                distance: distanceResult.distance,
                duration: distanceResult.duration,
                foundAddress: formattedAddress,
                coordinates: { lat, lng },
                method: "google_distance_matrix",
            };
        } else {
            // Fallback: t√≠nh kho·∫£ng c√°ch tr·ª±c ti·∫øp b·∫±ng Haversine
            const distance = calculateHaversineDistance(hustLat, hustLng, lat, lng);
            return {
                distance: distance,
                foundAddress: formattedAddress,
                coordinates: { lat, lng },
                method: "haversine_fallback",
            };
        }
    } catch (error) {
        console.error("L·ªói khi t√≠nh kho·∫£ng c√°ch:", error);

        // Fallback cu·ªëi c√πng: s·ª≠ d·ª•ng OpenStreetMap
        return await calculateDistanceFallback(address);
    }
}

// Chu·∫©n h√≥a ƒë·ªãa ch·ªâ ƒë·ªÉ tƒÉng kh·∫£ nƒÉng t√¨m ki·∫øm
function normalizeAddress(address) {
    // ƒê·∫£m b·∫£o ƒë·ªãa ch·ªâ c√≥ "H√† N·ªôi"
    if (!address.toLowerCase().includes("h√† n·ªôi") && !address.toLowerCase().includes("hanoi")) {
        address = address + ", H√† N·ªôi";
    }
    
    // Th√™m "Vi·ªát Nam" n·∫øu ch∆∞a c√≥
    if (!address.toLowerCase().includes("vi·ªát nam") && !address.toLowerCase().includes("vietnam")) {
        address = address + ", Vi·ªát Nam";
    }
    
    return address;
}

// Geocoding s·ª≠ d·ª•ng Google Maps API
async function geocodeAddress(address) {
    try {
        const response = await fetch(
            `https://maps.googleapis.com/maps/api/geocode/json?` +
                `address=${encodeURIComponent(address)}&` +
                `region=vn&` +
                `language=vi&` +
                `key=${GOOGLE_MAPS_API_KEY}`
        );

        const data = await response.json();

        if (data.status === "OK" && data.results.length > 0) {
            const result = data.results[0];
            const location = result.geometry.location;

            return {
                lat: location.lat,
                lng: location.lng,
                formattedAddress: result.formatted_address,
            };
        } else {
            console.error("Geocoding th·∫•t b·∫°i:", data.status);
            return null;
        }
    } catch (error) {
        console.error("L·ªói geocoding:", error);
        return null;
    }
}

// T√≠nh kho·∫£ng c√°ch s·ª≠ d·ª•ng Google Distance Matrix API
async function calculateDistanceMatrix(origin, destination) {
    try {
        const response = await fetch(
            `https://maps.googleapis.com/maps/api/distancematrix/json?` +
                `origins=${encodeURIComponent(origin)}&` +
                `destinations=${encodeURIComponent(destination)}&` +
                `mode=driving&` +
                `language=vi&` +
                `region=vn&` +
                `key=${GOOGLE_MAPS_API_KEY}`
        );

        const data = await response.json();

        if (data.status === "OK" && data.rows.length > 0 && data.rows[0].elements.length > 0 && data.rows[0].elements[0].status === "OK") {
            const element = data.rows[0].elements[0];

            return {
                distance: element.distance.value / 1000, // Convert t·ª´ meters sang km
                duration: element.duration.value / 60, // Convert t·ª´ seconds sang minutes
                distanceText: element.distance.text,
                durationText: element.duration.text,
            };
        } else {
            console.error("Distance Matrix th·∫•t b·∫°i:", data.status);
            return null;
        }
    } catch (error) {
        console.error("L·ªói Distance Matrix:", error);
        return null;
    }
}

// Fallback function s·ª≠ d·ª•ng OpenStreetMap
async function calculateDistanceFallback(address) {
    try {
        const hustLat = 21.0070;
        const hustLng = 105.8430;

        console.log("S·ª≠ d·ª•ng OpenStreetMap fallback...");
        
        // Chu·∫©n h√≥a ƒë·ªãa ch·ªâ ƒë·ªÉ tƒÉng kh·∫£ nƒÉng t√¨m th·∫•y
        const normalizedAddress = normalizeAddress(address);

        const response = await fetch(
            `https://nominatim.openstreetmap.org/search?` +
                `format=json&` +
                `q=${encodeURIComponent(normalizedAddress)}&` +
                `limit=5&` +
                `addressdetails=1&` +
                `countrycodes=vn&` +
                `accept-language=vi`,
            {
                headers: {
                    "User-Agent": "CTES-SIE-SHOP-Website",
                },
            }
        );

        const data = await response.json();

        if (data && data.length > 0) {
            // T√¨m k·∫øt qu·∫£ t·ªët nh·∫•t d·ª±a tr√™n ƒë·ªô ch√≠nh x√°c
            let bestResult = data[0];
            let bestScore = 0;
            
            for (let result of data) {
                let score = 0;
                // ∆Øu ti√™n k·∫øt qu·∫£ c√≥ "H√† N·ªôi"
                if (result.display_name.toLowerCase().includes("h√† n·ªôi") || result.display_name.toLowerCase().includes("hanoi")) {
                    score += 5;
                }
                
                // Ki·ªÉm tra xem t·∫•t c·∫£ c√°c t·ª´ quan tr·ªçng c√≥ trong k·∫øt qu·∫£ kh√¥ng
                const importantWords = address.toLowerCase().split(/\s+/).filter(w => w.length > 2);
                for (let word of importantWords) {
                    if (result.display_name.toLowerCase().includes(word)) {
                        score += 1;
                    }
                }
                
                if (score > bestScore) {
                    bestScore = score;
                    bestResult = result;
                }
            }

            const lat = parseFloat(bestResult.lat);
            const lng = parseFloat(bestResult.lon);
            const distance = calculateHaversineDistance(hustLat, hustLng, lat, lng);

            return {
                distance: distance,
                foundAddress: bestResult.display_name,
                coordinates: { lat, lng },
                method: "openstreetmap_fallback",
                isApproximate: true,
            };
        }

        return null;
    } catch (error) {
        console.error("T√≠nh kho·∫£ng c√°ch fallback th·∫•t b·∫°i:", error);
        return null;
    }
}

// C·∫£i ti·∫øn h√†m Haversine cho t√≠nh to√°n ch√≠nh x√°c h∆°n
function calculateHaversineDistance(lat1, lon1, lat2, lon2) {
    if (isNaN(lat1) || isNaN(lon1) || isNaN(lat2) || isNaN(lon2)) {
        console.error("T·ªça ƒë·ªô kh√¥ng h·ª£p l·ªá cho t√≠nh to√°n kho·∫£ng c√°ch");
        return null;
    }

    const R = 6371; // B√°n k√≠nh tr√°i ƒë·∫•t t√≠nh b·∫±ng km

    const lat1Rad = (lat1 * Math.PI) / 180;
    const lat2Rad = (lat2 * Math.PI) / 180;
    const deltaLatRad = ((lat2 - lat1) * Math.PI) / 180;
    const deltaLonRad = ((lon2 - lon1) * Math.PI) / 180;

    const a = Math.sin(deltaLatRad / 2) * Math.sin(deltaLatRad / 2) + 
              Math.cos(lat1Rad) * Math.cos(lat2Rad) * 
              Math.sin(deltaLonRad / 2) * Math.sin(deltaLonRad / 2);

    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
    const distance = R * c;

    // Th√™m h·ªá s·ªë ƒëi·ªÅu ch·ªânh ƒë∆∞·ªùng ƒëi th·ª±c t·∫ø (ƒë∆∞·ªùng kh√¥ng ƒëi th·∫≥ng)
    const roadFactor = 1.3;
    return Math.round((distance * roadFactor) * 10) / 10; // L√†m tr√≤n 1 ch·ªØ s·ªë th·∫≠p ph√¢n
}

// C·∫≠p nh·∫≠t ph√≠ giao h√†ng v·ªõi Google Maps
async function updateShippingFee() {
    const addressInput = document.getElementById("address");
    const distanceInfo = document.getElementById("distanceInfo");
    const distanceText = document.getElementById("distanceText");
    const shippingFeeSpan = document.getElementById("shippingFee");

    if (!addressInput || !distanceInfo || !distanceText || !shippingFeeSpan) {
        console.error("Thi·∫øu c√°c ph·∫ßn t·ª≠ c·∫ßn thi·∫øt ƒë·ªÉ t√≠nh ph√≠ ship");
        return;
    }

    const address = addressInput.value.trim();

    if (!address) {
        distanceInfo.style.display = "none";
        shippingFee = 0;
        updatePaymentSummary();
        return;
    }

    // Validation ƒë·ªãa ch·ªâ c∆° b·∫£n
    if (address.length < 10) {
        distanceInfo.style.display = "block";
        distanceText.innerHTML = '<span style="color: #f59e0b;">‚ö†Ô∏è Vui l√≤ng nh·∫≠p ƒë·ªãa ch·ªâ chi ti·∫øt h∆°n (t·ªëi thi·ªÉu 10 k√Ω t·ª±)</span>';
        shippingFeeSpan.textContent = "";
        return;
    }

    // Hi·ªÉn th·ªã loading v·ªõi animation
    distanceInfo.style.display = "block";
    distanceText.innerHTML = `
        <span class="loading-text">üìç ƒêang t√≠nh kho·∫£ng c√°ch v√† ph√≠ giao h√†ng...</span>
        <div class="loading-spinner-small"></div>
    `;
    shippingFeeSpan.textContent = "";

    try {
        const result = await calculateDistance(address);

        if (result && result.distance !== null) {
            const { distance, duration, foundAddress, method, isApproximate } = result;

            let methodText = "";
            let methodClass = "";
            
            if (method === "google_distance_matrix") {
                methodText = "üó∫Ô∏è Google Maps";
                methodClass = "method-google";
            } else if (method === "haversine_fallback") {
                methodText = "üìè Kho·∫£ng c√°ch th·∫≥ng";
                methodClass = "method-haversine";
            } else if (method === "openstreetmap_fallback") {
                methodText = "üåç B·∫£n ƒë·ªì m·ªü (∆∞·ªõc t√≠nh)";
                methodClass = "method-osm";
            }

            // T√≠nh ph√≠ ship
            if (distance <= 5) {
                shippingFee = 0;
                distanceText.innerHTML = `
                    <div class="distance-result success">
                        <strong>üìç Kho·∫£ng c√°ch: ${distance.toFixed(1)}km</strong>
                        ${duration ? `<br><small>‚è±Ô∏è Th·ªùi gian: ~${Math.round(duration)} ph√∫t</small>` : ""}
                        <br><small class="method-info ${methodClass}">${methodText}</small>
                        ${isApproximate ? '<br><small class="approximate-info">‚ö†Ô∏è Kho·∫£ng c√°ch ∆∞·ªõc t√≠nh</small>' : ''}
                    </div>
                `;
                shippingFeeSpan.innerHTML = '<span style="color: #10b981; font-weight: bold;">üéâ Mi·ªÖn ph√≠ giao h√†ng!</span>';
            } else {
                shippingFee = Math.ceil(distance - 5) * 5000;
                distanceText.innerHTML = `
                    <div class="distance-result">
                        <strong>üìç Kho·∫£ng c√°ch: ${distance.toFixed(1)}km</strong>
                        ${duration ? `<br><small>‚è±Ô∏è Th·ªùi gian: ~${Math.round(duration)} ph√∫t</small>` : ""}
                        <br><small class="method-info ${methodClass}">${methodText}</small>
                        ${isApproximate ? '<br><small class="approximate-info">‚ö†Ô∏è Kho·∫£ng c√°ch ∆∞·ªõc t√≠nh</small>' : ''}
                    </div>
                `;
                shippingFeeSpan.innerHTML = `<span style="color: #f59e0b; font-weight: bold;">üöö Ph√≠ ship: ${shippingFee.toLocaleString("vi-VN")}ƒë</span>`;
            }

            // Hi·ªÉn th·ªã ƒë·ªãa ch·ªâ ƒë∆∞·ª£c t√¨m th·∫•y n·∫øu kh√°c nhi·ªÅu v·ªõi input
            if (foundAddress && foundAddress.toLowerCase() !== address.toLowerCase()) {
                distanceText.innerHTML += `
                    <div class="found-address">
                        <small style="color: #666; font-style: italic;">
                            üìç ƒê·ªãa ch·ªâ t√¨m th·∫•y: ${foundAddress}
                        </small>
                    </div>
                `;
            }
        } else {
            throw new Error("Kh√¥ng th·ªÉ t√≠nh kho·∫£ng c√°ch");
        }
    } catch (error) {
        console.error("T√≠nh kho·∫£ng c√°ch th·∫•t b·∫°i:", error);

        distanceText.innerHTML = `
            <div class="distance-error">
                <span style="color: #ef4444;">‚ùå Kh√¥ng th·ªÉ t√¨m th·∫•y ƒë·ªãa ch·ªâ ch√≠nh x√°c</span>
                <br><small style="color: #666;">
                    Vui l√≤ng ki·ªÉm tra l·∫°i ho·∫∑c li√™n h·ªá v·ªõi ch√∫ng t√¥i ƒë·ªÉ ƒë∆∞·ª£c h·ªó tr·ª£
                </small>
                <br><small style="color: #888;">
                    üí° G·ª£i √Ω: Nh·∫≠p ƒë·∫ßy ƒë·ªß s·ªë nh√†, t√™n ƒë∆∞·ªùng, ph∆∞·ªùng/x√£, qu·∫≠n/huy·ªán, H√† N·ªôi
                </small>
            </div>
        `;
        shippingFeeSpan.innerHTML = '<span style="color: #666;">Ph√≠ ship s·∫Ω ƒë∆∞·ª£c x√°c nh·∫≠n khi li√™n h·ªá</span>';
        shippingFee = 0;
    }

    updatePaymentSummary();
}

// Load Google Maps API dynamically
function loadGoogleMapsAPI() {
    return new Promise((resolve, reject) => {
        // Ki·ªÉm tra xem ƒë√£ load ch∆∞a
        if (window.google && window.google.maps) {
            resolve();
            return;
        }

        const script = document.createElement("script");
        script.src = `https://maps.googleapis.com/maps/api/js?key=${GOOGLE_MAPS_API_KEY}&libraries=geometry`;
        script.async = true;
        script.defer = true;

        script.onload = () => resolve();
        script.onerror = () => reject(new Error("Google Maps API failed to load"));

        document.head.appendChild(script);
    });
}

// Alternative: S·ª≠ d·ª•ng Google Maps JavaScript API tr·ª±c ti·∫øp (n·∫øu c√≥)
async function calculateDistanceWithMapsAPI(origin, destination) {
    try {
        await loadGoogleMapsAPI();

        const service = new google.maps.DistanceMatrixService();

        return new Promise((resolve, reject) => {
            service.getDistanceMatrix(
                {
                    origins: [origin],
                    destinations: [destination],
                    travelMode: google.maps.TravelMode.DRIVING,
                    unitSystem: google.maps.UnitSystem.METRIC,
                    avoidHighways: false,
                    avoidTolls: false,
                },
                (response, status) => {
                    if (status === google.maps.DistanceMatrixStatus.OK) {
                        const element = response.rows[0].elements[0];
                        if (element.status === "OK") {
                            resolve({
                                distance: element.distance.value / 1000,
                                duration: element.duration.value / 60,
                                distanceText: element.distance.text,
                                durationText: element.duration.text,
                            });
                        } else {
                            reject(new Error(`Distance calculation failed: ${element.status}`));
                        }
                    } else {
                        reject(new Error(`Distance Matrix API failed: ${status}`));
                    }
                }
            );
        });
    } catch (error) {
        console.error("Google Maps API error:", error);
        throw error;
    }
}

// Th√™m CSS cho loading v√† styling m·ªõi
const enhancedDistanceCSS = `
    <style>
        .loading-text {
            color: #0ea5e9;
            font-weight: 500;
        }
        
        .loading-spinner-small {
            display: inline-block;
            width: 16px;
            height: 16px;
            border: 2px solid #e0f7fa;
            border-top: 2px solid #0ea5e9;
            border-radius: 50%;
            animation: spin 1s linear infinite;
            margin-left: 8px;
        }
        
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
        
        .distance-result {
            background: linear-gradient(145deg, #f0f9ff, #e0f7fa);
            padding: 12px 15px;
            border-radius: 10px;
            border-left: 4px solid #0ea5e9;
            margin-top: 5px;
        }
        
        .distance-result.success {
            background: linear-gradient(145deg, #f0fdf4, #dcfce7);
            border-left-color: #10b981;
        }
        
        .distance-error {
            background: linear-gradient(145deg, #fef2f2, #fee2e2);
            padding: 12px 15px;
            border-radius: 10px;
            border-left: 4px solid #ef4444;
            margin-top: 5px;
        }
        
        .method-info {
            color: #6b7280;
            font-size: 0.8rem;
            background: rgba(255, 255, 255, 0.7);
            padding: 2px 6px;
            border-radius: 4px;
            display: inline-block;
            margin-top: 4px;
        }
        
        .found-address {
            margin-top: 8px;
            padding: 8px 10px;
            background: rgba(255, 255, 255, 0.8);
            border-radius: 6px;
            border: 1px dashed #d1d5db;
        }
    </style>
`;

// Th√™m CSS khi trang load
document.addEventListener("DOMContentLoaded", function () {
    if (!document.querySelector("#enhanced-distance-styles")) {
        const styleElement = document.createElement("div");
        styleElement.id = "enhanced-distance-styles";
        styleElement.innerHTML = enhancedDistanceCSS;
        document.head.appendChild(styleElement);
    }
});

// T√≠nh kho·∫£ng c√°ch t·ª´ HUST (ƒê·∫°i h·ªçc B√°ch khoa H√† N·ªôi)
async function calculateDistance(address) {
    try {
        // T·ªça ƒë·ªô ch√≠nh x√°c c·ªßa HUST (ƒê·∫°i h·ªçc B√°ch khoa H√† N·ªôi)
        const hustLat = 21.0070;
        const hustLng = 105.8430;
        const hustAddress = "ƒê·∫°i h·ªçc B√°ch khoa H√† N·ªôi, Hai B√† Tr∆∞ng, H√† N·ªôi, Vi·ªát Nam";

        console.log("T√≠nh kho·∫£ng c√°ch t·ª´ HUST ƒë·∫øn:", address);

        // Chu·∫©n h√≥a ƒë·ªãa ch·ªâ
        const normalizedAddress = normalizeAddress(address);

        // S·ª≠ d·ª•ng Google Geocoding API ƒë·ªÉ l·∫•y t·ªça ƒë·ªô ch√≠nh x√°c
        const geocodeResult = await geocodeAddress(normalizedAddress);

        if (!geocodeResult) {
            throw new Error("Kh√¥ng th·ªÉ t√¨m th·∫•y ƒë·ªãa ch·ªâ");
        }

        const { lat, lng, formattedAddress } = geocodeResult;

        // S·ª≠ d·ª•ng Google Distance Matrix API ƒë·ªÉ t√≠nh kho·∫£ng c√°ch th·ª±c t·∫ø
        const distanceResult = await calculateDistanceMatrix(hustAddress, formattedAddress);

        if (distanceResult) {
            return {
                distance: distanceResult.distance,
                duration: distanceResult.duration,
                foundAddress: formattedAddress,
                coordinates: { lat, lng },
                method: "google_distance_matrix",
            };
        } else {
            // Fallback: t√≠nh kho·∫£ng c√°ch tr·ª±c ti·∫øp b·∫±ng Haversine
            const distance = calculateHaversineDistance(hustLat, hustLng, lat, lng);
            return {
                distance: distance,
                foundAddress: formattedAddress,
                coordinates: { lat, lng },
                method: "haversine_fallback",
            };
        }
    } catch (error) {
        console.error("L·ªói khi t√≠nh kho·∫£ng c√°ch:", error);

        // Fallback cu·ªëi c√πng: s·ª≠ d·ª•ng OpenStreetMap
        return await calculateDistanceFallback(address);
    }
}

// Chu·∫©n h√≥a ƒë·ªãa ch·ªâ ƒë·ªÉ tƒÉng kh·∫£ nƒÉng t√¨m ki·∫øm
function normalizeAddress(address) {
    // ƒê·∫£m b·∫£o ƒë·ªãa ch·ªâ c√≥ "H√† N·ªôi"
    if (!address.toLowerCase().includes("h√† n·ªôi") && !address.toLowerCase().includes("hanoi")) {
        address = address + ", H√† N·ªôi";
    }
    
    // Th√™m "Vi·ªát Nam" n·∫øu ch∆∞a c√≥
    if (!address.toLowerCase().includes("vi·ªát nam") && !address.toLowerCase().includes("vietnam")) {
        address = address + ", Vi·ªát Nam";
    }
    
    return address;
}

// Geocoding s·ª≠ d·ª•ng Google Maps API
async function geocodeAddress(address) {
    try {
        const response = await fetch(
            `https://maps.googleapis.com/maps/api/geocode/json?` +
                `address=${encodeURIComponent(address)}&` +
                `region=vn&` +
                `language=vi&` +
                `key=${GOOGLE_MAPS_API_KEY}`
        );

        const data = await response.json();

        if (data.status === "OK" && data.results.length > 0) {
            const result = data.results[0];
            const location = result.geometry.location;

            return {
                lat: location.lat,
                lng: location.lng,
                formattedAddress: result.formatted_address,
            };
        } else {
            console.error("Geocoding th·∫•t b·∫°i:", data.status);
            return null;
        }
    } catch (error) {
        console.error("L·ªói geocoding:", error);
        return null;
    }
}

// T√≠nh kho·∫£ng c√°ch s·ª≠ d·ª•ng Google Distance Matrix API
async function calculateDistanceMatrix(origin, destination) {
    try {
        const response = await fetch(
            `https://maps.googleapis.com/maps/api/distancematrix/json?` +
                `origins=${encodeURIComponent(origin)}&` +
                `destinations=${encodeURIComponent(destination)}&` +
                `mode=driving&` +
                `language=vi&` +
                `region=vn&` +
                `key=${GOOGLE_MAPS_API_KEY}`
        );

        const data = await response.json();

        if (data.status === "OK" && data.rows.length > 0 && data.rows[0].elements.length > 0 && data.rows[0].elements[0].status === "OK") {
            const element = data.rows[0].elements[0];

            return {
                distance: element.distance.value / 1000, // Convert t·ª´ meters sang km
                duration: element.duration.value / 60, // Convert t·ª´ seconds sang minutes
                distanceText: element.distance.text,
                durationText: element.duration.text,
            };
        } else {
            console.error("Distance Matrix th·∫•t b·∫°i:", data.status);
            return null;
        }
    } catch (error) {
        console.error("L·ªói Distance Matrix:", error);
        return null;
    }
}

// Fallback function s·ª≠ d·ª•ng OpenStreetMap
async function calculateDistanceFallback(address) {
    try {
        const hustLat = 21.0070;
        const hustLng = 105.8430;

        console.log("S·ª≠ d·ª•ng OpenStreetMap fallback...");
        
        // Chu·∫©n h√≥a ƒë·ªãa ch·ªâ ƒë·ªÉ tƒÉng kh·∫£ nƒÉng t√¨m th·∫•y
        const normalizedAddress = normalizeAddress(address);

        const response = await fetch(
            `https://nominatim.openstreetmap.org/search?` +
                `format=json&` +
                `q=${encodeURIComponent(normalizedAddress)}&` +
                `limit=5&` +
                `addressdetails=1&` +
                `countrycodes=vn&` +
                `accept-language=vi`,
            {
                headers: {
                    "User-Agent": "CTES-SIE-SHOP-Website",
                },
            }
        );

        const data = await response.json();

        if (data && data.length > 0) {
            // T√¨m k·∫øt qu·∫£ t·ªët nh·∫•t d·ª±a tr√™n ƒë·ªô ch√≠nh x√°c
            let bestResult = data[0];
            let bestScore = 0;
            
            for (let result of data) {
                let score = 0;
                // ∆Øu ti√™n k·∫øt qu·∫£ c√≥ "H√† N·ªôi"
                if (result.display_name.toLowerCase().includes("h√† n·ªôi") || result.display_name.toLowerCase().includes("hanoi")) {
                    score += 5;
                }
                
                // Ki·ªÉm tra xem t·∫•t c·∫£ c√°c t·ª´ quan tr·ªçng c√≥ trong k·∫øt qu·∫£ kh√¥ng
                const importantWords = address.toLowerCase().split(/\s+/).filter(w => w.length > 2);
                for (let word of importantWords) {
                    if (result.display_name.toLowerCase().includes(word)) {
                        score += 1;
                    }
                }
                
                if (score > bestScore) {
                    bestScore = score;
                    bestResult = result;
                }
            }

            const lat = parseFloat(bestResult.lat);
            const lng = parseFloat(bestResult.lon);
            const distance = calculateHaversineDistance(hustLat, hustLng, lat, lng);

            return {
                distance: distance,
                foundAddress: bestResult.display_name,
                coordinates: { lat, lng },
                method: "openstreetmap_fallback",
                isApproximate: true,
            };
        }

        return null;
    } catch (error) {
        console.error("T√≠nh kho·∫£ng c√°ch fallback th·∫•t b·∫°i:", error);
        return null;
    }
}

// C·∫£i ti·∫øn h√†m Haversine cho t√≠nh to√°n ch√≠nh x√°c h∆°n
function calculateHaversineDistance(lat1, lon1, lat2, lon2) {
    if (isNaN(lat1) || isNaN(lon1) || isNaN(lat2) || isNaN(lon2)) {
        console.error("T·ªça ƒë·ªô kh√¥ng h·ª£p l·ªá cho t√≠nh to√°n kho·∫£ng c√°ch");
        return null;
    }

    const R = 6371; // B√°n k√≠nh tr√°i ƒë·∫•t t√≠nh b·∫±ng km

    const lat1Rad = (lat1 * Math.PI) / 180;
    const lat2Rad = (lat2 * Math.PI) / 180;
    const deltaLatRad = ((lat2 - lat1) * Math.PI) / 180;
    const deltaLonRad = ((lon2 - lon1) * Math.PI) / 180;

    const a = Math.sin(deltaLatRad / 2) * Math.sin(deltaLatRad / 2) + 
              Math.cos(lat1Rad) * Math.cos(lat2Rad) * 
              Math.sin(deltaLonRad / 2) * Math.sin(deltaLonRad / 2);

    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
    const distance = R * c;

    // Th√™m h·ªá s·ªë ƒëi·ªÅu ch·ªânh ƒë∆∞·ªùng ƒëi th·ª±c t·∫ø (ƒë∆∞·ªùng kh√¥ng ƒëi th·∫≥ng)
    const roadFactor = 1.3;
    return Math.round((distance * roadFactor) * 10) / 10; // L√†m tr√≤n 1 ch·ªØ s·ªë th·∫≠p ph√¢n
}

// C·∫≠p nh·∫≠t ph√≠ giao h√†ng v·ªõi Google Maps
async function updateShippingFee() {
    const addressInput = document.getElementById("address");
    const distanceInfo = document.getElementById("distanceInfo");
    const distanceText = document.getElementById("distanceText");
    const shippingFeeSpan = document.getElementById("shippingFee");

    if (!addressInput || !distanceInfo || !distanceText || !shippingFeeSpan) {
        console.error("Thi·∫øu c√°c ph·∫ßn t·ª≠ c·∫ßn thi·∫øt ƒë·ªÉ t√≠nh ph√≠ ship");
        return;
    }

    const address = addressInput.value.trim();

    if (!address) {
        distanceInfo.style.display = "none";
        shippingFee = 0;
        updatePaymentSummary();
        return;
    }

    // Validation ƒë·ªãa ch·ªâ c∆° b·∫£n
    if (address.length < 10) {
        distanceInfo.style.display = "block";
        distanceText.innerHTML = '<span style="color: #f59e0b;">‚ö†Ô∏è Vui l√≤ng nh·∫≠p ƒë·ªãa ch·ªâ chi ti·∫øt h∆°n (t·ªëi thi·ªÉu 10 k√Ω t·ª±)</span>';
        shippingFeeSpan.textContent = "";
        return;
    }

    // Hi·ªÉn th·ªã loading v·ªõi animation
    distanceInfo.style.display = "block";
    distanceText.innerHTML = `
        <span class="loading-text">üìç ƒêang t√≠nh kho·∫£ng c√°ch v√† ph√≠ giao h√†ng...</span>
        <div class="loading-spinner-small"></div>
    `;
    shippingFeeSpan.textContent = "";

    try {
        const result = await calculateDistance(address);

        if (result && result.distance !== null) {
            const { distance, duration, foundAddress, method, isApproximate } = result;

            let methodText = "";
            let methodClass = "";
            
            if (method === "google_distance_matrix") {
                methodText = "üó∫Ô∏è Google Maps";
                methodClass = "method-google";
            } else if (method === "haversine_fallback") {
                methodText = "üìè Kho·∫£ng c√°ch th·∫≥ng";
                methodClass = "method-haversine";
            } else if (method === "openstreetmap_fallback") {
                methodText = "üåç B·∫£n ƒë·ªì m·ªü (∆∞·ªõc t√≠nh)";
                methodClass = "method-osm";
            }

            // T√≠nh ph√≠ ship
            if (distance <= 5) {
                shippingFee = 0;
                distanceText.innerHTML = `
                    <div class="distance-result success">
                        <strong>üìç Kho·∫£ng c√°ch: ${distance.toFixed(1)}km</strong>
                        ${duration ? `<br><small>‚è±Ô∏è Th·ªùi gian: ~${Math.round(duration)} ph√∫t</small>` : ""}
                        <br><small class="method-info ${methodClass}">${methodText}</small>
                        ${isApproximate ? '<br><small class="approximate-info">‚ö†Ô∏è Kho·∫£ng c√°ch ∆∞·ªõc t√≠nh</small>' : ''}
                    </div>
                `;
                shippingFeeSpan.innerHTML = '<span style="color: #10b981; font-weight: bold;">üéâ Mi·ªÖn ph√≠ giao h√†ng!</span>';
            } else {
                shippingFee = Math.ceil(distance - 5) * 5000;
                distanceText.innerHTML = `
                    <div class="distance-result">
                        <strong>üìç Kho·∫£ng c√°ch: ${distance.toFixed(1)}km</strong>
                        ${duration ? `<br><small>‚è±Ô∏è Th·ªùi gian: ~${Math.round(duration)} ph√∫t</small>` : ""}
                        <br><small class="method-info ${methodClass}">${methodText}</small>
                        ${isApproximate ? '<br><small class="approximate-info">‚ö†Ô∏è Kho·∫£ng c√°ch ∆∞·ªõc t√≠nh</small>' : ''}
                    </div>
                `;
                shippingFeeSpan.innerHTML = `<span style="color: #f59e0b; font-weight: bold;">üöö Ph√≠ ship: ${shippingFee.toLocaleString("vi-VN")}ƒë</span>`;
            }

            // Hi·ªÉn th·ªã ƒë·ªãa ch·ªâ ƒë∆∞·ª£c t√¨m th·∫•y n·∫øu kh√°c nhi·ªÅu v·ªõi input
            if (foundAddress && foundAddress.toLowerCase() !== address.toLowerCase()) {
                distanceText.innerHTML += `
                    <div class="found-address">
                        <small style="color: #666; font-style: italic;">
                            üìç ƒê·ªãa ch·ªâ t√¨m th·∫•y